#ifndef MDTape_h
#define MDTape_h

#include "Arduino.h"
#include "MDTDisplay.h"

class MDTape
{
  public:
    MDTape();
    void begin(char input[]);
    void mainloop();
    int search_input();
    int search_state(char nextstate);
    char right();
    char left();
    void chvalue(char newval);
    void change_state(char newstate);
  private:
    void stamp();
    MDTDisplay screen;
    char tape[101];// = {'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'}; //101 spaces
    int _curs;
    char state;
    int MDTlength;
    int stbeg;
    char cell;
    const int stpos = 0, inpos = 1, nxstpos = 2, outpos = 3, dirpos = 4;
    //state, input, pointing (next), output and direction char position on the string (row)
    
    const char MDT[45][5] = { //useful str.clear() to keep in mind...
      ('0','0','0','0','>'),
      ('0','1','0','1','>'),
      ('0','2','0','2','>'),
      ('0','3','0','3','>'),
      ('0','4','0','4','>'),
      ('0','5','0','5','>'),
      ('0','6','0','6','>'),
      ('0','7','0','7','>'),
      ('0','8','0','8','>'),
      ('0','9','0','9','>'),
      ('0','-','1','-','<'),
      ('0','=','0','=','>'),
      ('1','1','2','0','<'),
      ('1','2','2','1','<'),
      ('1','3','2','2','<'),
      ('1','4','2','3','<'),
      ('1','5','2','4','<'),
      ('1','6','2','5','<'),
      ('1','7','2','6','<'),
      ('1','8','2','7','<'),
      ('1','9','2','8','<'),
      ('1','0','1','9','<'),
      ('1','=','4','=','>'),
      ('1','-','6','=','<'),
      ('2','0','2','0','<'),
      ('2','1','2','1','<'),
      ('2','2','2','2','<'),
      ('2','3','2','3','<'),
      ('2','4','2','4','<'),
      ('2','5','2','5','<'),
      ('2','6','2','6','<'),
      ('2','7','2','7','<'),
      ('2','8','2','8','<'),
      ('2','9','2','9','<'),
      ('2','-','3','=','<'),
      ('2','=','3','=','<'),
      ('3','-','0','1','>'),
      ('3','0','0','1','>'),
      ('3','1','3','0','<'),
      ('4','9','4','9','>'),
      ('4','-','5','-','<'),
      ('5','9','5','-','<'),
      ('5','=','7','-','<'),
      ('6','-','6','0','>'),
      ('6','=','4','=','>')
    };
};

#endif